//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Project")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub name: String,
    pub description: String,
    #[sea_orm(column_type = "Binary(16)")]
    pub company_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(16)")]
    pub user_id: Vec<u8>,
    #[sea_orm(column_type = "Binary(16)")]
    pub project_status_id: Vec<u8>,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::company::Entity",
        from = "Column::CompanyId",
        to = "super::company::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Company,
    #[sea_orm(
        belongs_to = "super::project_status::Entity",
        from = "Column::ProjectStatusId",
        to = "super::project_status::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ProjectStatus,
    #[sea_orm(has_many = "super::project_x_info::Entity")]
    ProjectXInfo,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::company::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Company.def()
    }
}

impl Related<super::project_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectStatus.def()
    }
}

impl Related<super::project_x_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProjectXInfo.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::info::Entity> for Entity {
    fn to() -> RelationDef {
        super::project_x_info::Relation::Info.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::project_x_info::Relation::Project.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
